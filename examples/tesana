#!/usr/bin/env python

import pyfits
from numpy import *
from pytes import *

def main(pulse, noise, cutoff=None, binsize=1, max_shift=10,
            ka_min=80, kb_min=40, thre=0.4, sigma=2, shift=False,
            kbfit=False, method="mle", plotting=True, session="Unnamed"):
    
    if plotting:
        # Import matplotlib
        import matplotlib
        matplotlib.use( 'Agg' )
        from pylab import figure, plot, errorbar, hist, axvline, xlim, ylim, loglog, xlabel, ylabel, savefig
        
        print "Session: %s" % session
    
    # Open fits file and get pulse/noise data
    phl = pyfits.open(pulse)
    p = phl[1].data.field(1).copy()
    dtp = phl[1].header['THSCL2']
    tp = arange(p.shape[-1]) * dtp
    phl.close()
    
    nhl = pyfits.open(noise)
    n = nhl[1].data.field(1).copy()
    dtn = phl[1].header['THSCL2']
    tn = arange(n.shape[-1]) * dtn
    nhl.close()
    
    # Plot averaged pulse
    if plotting:
        figure()
        plot(tp, Filter.average_pulse(p, max_shift=max_shift))
        xlabel('Time\quad(s)')
        ylabel('Averaged Pulse\quad(V)')
        savefig('%s-averagepulse.pdf' % session)
    
    # Plot noise spectrum
    if plotting:
        nspec = sqrt(Filter.average_noise(n)*(dtn*n.shape[-1]))
        figure()
        plot(arange(len(nspec))*(dtn*n.shape[-1])**-1, nspec)
        loglog()
        xlabel('Frequency\quad(Hz)')
        ylabel('Noise\quad(V/$\sqrt{\mathrm{Hz}}$)')
        savefig('%s-noise.pdf' % session)
    
    # Generate template
    t, sn = Filter.generate_template(p, n, cutoff=cutoff, max_shift=max_shift)
    
    # Plot template
    if plotting:
        figure()
        plot(tp, t)
        xlabel('Time\quad(s)')
        ylabel('Template\quad(A.U.)')
        savefig('%s-template.pdf' % session)
    
    # Plot S/N ratio
    if plotting:
        figure()
        plot(arange(len(sn))*(dtp*p.shape[-1])**-1, sn*sqrt(dtp*p.shape[-1]))
        loglog()
        xlabel('Frequency\quad(Hz)')
        ylabel('S/N\quad(/$\sqrt{\mathrm{Hz}}$)')
        savefig('%s-sn.pdf' % session)
    
    # Calculate baseline resolution
    print "Baseline resolution for 5.9 keV: %.2f eV" % Analysis.baseline(sn)
    
    # Perform optimal filtering
    pha = Filter.optimal_filter(p, t, max_shift=max_shift)
    
    # Offset correction
    offset = Filter.offset(p)
    oc_pha, (a, b), coef = Analysis.offset_correction(pha, offset, thre=thre, sigma=sigma, full=True)
    
    if a is not None:
        print "Offset correction with: PHA = %f * (1 + %f * Offset)" % (a, b)
    
        if plotting:
            figure()
            ka = Analysis.ka(vstack((pha, offset)).T, sigma=sigma)
            plot(ka.T[1], ka.T[0], '.', c='k')
            x_min, x_max = xlim()
            ofs = linspace(x_min, x_max)
            plot(ofs, a*(1+b*ofs), 'r-')
            xlabel('Offset\quad(V)')
            ylabel('PHA\quad(V)')
            savefig('%s-offset.pdf' % session)
    else:
        print "Skipped offset correction: correlation coefficient (%f) is too small" % coef
    
    # Linearity correction
    lc_pha, (a, b) = Analysis.linearity_correction(oc_pha, sigma=sigma, full=True)
    print "Linearity correction with: PHA = %e * E^2 + %e * E" % (a, b)
    
    # Plot Spectrum
    if plotting:
        figure()
        hist(lc_pha[lc_pha==lc_pha]/1e3, bins=4096, histtype='stepfilled', color='y')
        xlim(0, 7)
        xlabel('Energy\quad(keV)')
        ylabel('Count')
        savefig('%s-spec.pdf' % session)
    
    # Fitting
    
    ## MnKa
    mnka = Analysis.ka(lc_pha, sigma=sigma)
    dE, width, width_error = fit(mnka, binsize, ka_min, "MnKa", shift, method)
    if plotting:
        plot_line(mnka, binsize, min, "MnKa", shift, method, dE, width, width_error, session)

    ## MnKb
    mnkb = Analysis.kb(lc_pha, sigma=sigma)
    if kbfit:
        dE, width, width_error = fit(mnkb, binsize, kb_min, "MnKb", shift, method)
    else:
        width_error = None
    
    if plotting:
        plot_line(mnkb, binsize, min, "MnKb", shift, method, dE, width, width_error, session)

def plot_line(data, binsize, min, line, shift, method, dE, width, width_error, session):

    # Import matplotlib
    import matplotlib
    matplotlib.use( 'Agg' )
    from pylab import figure, plot, errorbar, hist, annotate, xlim, ylim, loglog, xlabel, ylabel, savefig
    
    # Draw histogram
    figure()
    n, bins = Analysis.histogram(data, binsize=binsize)
    
    if method in ("cs"):
        gn, gbins = Analysis.group_bin(n, bins, min=min)
    else:
        # No grouping in mle and ls
        gn, gbins = n, bins

    ngn = gn/(diff(gbins))
    ngn_sigma = sqrt(gn)/(diff(gbins))
    cbins = (gbins[1:]+gbins[:-1])/2

    if method == "cs":
        errorbar(cbins, ngn, yerr=ngn_sigma, xerr=diff(gbins)/2, capsize=0, ecolor='k', fmt=None)
    else:
        hist(data, bins=gbins, weights=ones(len(data))/binsize, histtype='step', ec='k')

    E = linspace(bins.min(), bins.max(), 1000)
    
    model = Analysis.normalization(ngn, gbins, dE, width, line=line, shift=shift) \
                * Analysis.line_model(E, dE, width, line=line, shift=shift, full=True)
    
    # Plot theoretical model
    plot(E, model[0], 'r-')
    
    # Plot fine structures
    for m in model[1:]:
        plot(E, m, 'b--')

    xlabel('Energy\quad(eV)')
    ylabel('Normalized Count\quad(count/eV)')

    if width_error is not None:
        anon = 'FWHM$=%.2f\pm%.2f$ eV' % (width, width_error)
    else:
        anon = 'FWHM$=%.2f$ eV (Fixed)' % width

    annotate(anon, xy=(-10, -10),
                xycoords='axes points',
                horizontalalignment='right', verticalalignment='top',
                fontsize=20)

    savefig("%s-%s.pdf" % (session, line))


def fit(data, binsize, min, line, shift, method):
    
    # Fit
    (dE, width), (dE_error, width_error), e = Analysis.fit(data, binsize=binsize, min=min, line=line, shift=shift, method=method)
    
    if method == "cs":
        chi_squared, dof = e
    
    if method in ("mle", "ls"):
        print "%s: %.2f +/- %.2f eV @ Ec%+.2f eV" \
            % (line, width, width_error, dE)
    elif method == "cs":
        print "%s: %.2f +/- %.2f eV @ Ec%+.2f eV (Red. chi^2 = %.1f/%d = %.2f)" \
            % (line, width, width_error, dE, chi_squared, dof, chi_squared/dof)
    
    return dE, width, width_error

if __name__ == '__main__':
    
    import sys, getopt
    
    opts, params = getopt.getopt(sys.argv[1:], 'h?a:b:t:c:e:s:',
                            ['shift', 'method=', 'kbfit', 'session=', 'noplot', 'help'])
    
    # Initialize
    cutoff = None
    binsize = 1
    ka_min = 80
    kb_min = 40
    thre = 0.4
    sigma = 3
    shift = False
    method = "mle"
    kbfit = False
    plotting = True
    session = "Unnamed"
    
    def usage():
        print """Usage: %s [options] pulse.fits noise.fits

Options:
    -c cutoff
        Cut-off bin for template generation (Default: no cut-off)
    -e binsize
        Size of energy bin in eV for histogram creation (Default: %d)
    -a min
        Desired minimum photons to group bins for MnKa spectrum (Default: %d)
        (valid only for chi-squared fitting)
    -b min
        Desired minimum photons to group bins for MnKb spectrum (Default: %d)
        (valid only for chi-squared fitting)
    -t threshold
        Threshold of correlation coef for offset correction (Default: %.1f)
    -s sigmas
        Sigmas for median filter (Default: %d)
    --method method
        Fitting method from mle (maximum-likelihood estimate), cs (chi-squared)
        or ls (least-squared) (Default: %s)
    --shift
        Treat dE as energy shift instead of scaling
    --kbfit
        Fit Kb line too
    --session name
        Session name used for output files (Default: %s)
    --noplot
        Suppress plots
    -h
        Show this usage.""" % (sys.argv[0], binsize, ka_min, kb_min, thre, sigma, method, session)
    
    for o, a in opts:
        if o == "-c":
            cutoff = int(a)
        if o == "-e":
            binsize = float(a)
        if o == "-a":
            ka_min = int(a)
        if o == "-t":
            thre = float(a)
        if o == "-b":
            kb_min = int(a)
        if o == "-s":
            sigma = float(a)
        if o == "--shift":
            shift = True
        if o == "--kbfit":
            kbfit = True
        if o == "--method":
            if a.lower() in ("mle", "cs", "ls"):
                method = a.lower()
            else:
                usage()
                exit()
        if o == "--session":
            session = a
        if o == "--noplot":
            plotting = False
        if o in ("-h", "-?", "--help"):
            usage()
            exit()

    try:
        pulse, noise = params
    except:
        usage()
        exit()
    
    main(pulse, noise, cutoff=cutoff, binsize=binsize,
            ka_min=ka_min, kb_min=kb_min, thre=thre,
            shift=shift, kbfit=kbfit, sigma=sigma, method=method,
            plotting=plotting, session=session)