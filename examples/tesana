#!/usr/bin/env python

import pyfits
from numpy import *
from pytes import *
import matplotlib
matplotlib.use( 'Agg' )
from pylab import figure, plot, hist, xlim, loglog, xlabel, ylabel, savefig

def main(pulse, noise, cutoff=None, max_shift=10, ka_bins=40, kb_bins=20, sigma=2, session="Unnamed"):
    
    print "Session: %s" % session
    
    # Open fits file and get pulse/noise data
    phl = pyfits.open(pulse)
    p = phl[1].data.field(1).copy()
    dtp = phl[1].header['THSCL2']
    tp = arange(p.shape[-1]) * dtp
    
    phl.close()
    
    nhl = pyfits.open(noise)
    n = nhl[1].data.field(1).copy()
    dtn = phl[1].header['THSCL2']
    tn = arange(n.shape[-1]) * dtn
    nhl.close()
    
    # Plot averaged pulse
    figure()
    plot(tp, Filter.average_pulse(p, max_shift=max_shift))
    xlabel('Time\quad(s)')
    ylabel('Averaged Pulse\quad(V)')
    savefig('%s-averagepulse.pdf' % session)
    
    # Plot noise spectrum
    nspec = sqrt(Filter.average_noise(n)*(dtn*n.shape[-1]))
    figure()
    plot(arange(len(nspec))*(dtn*n.shape[-1])**-1, nspec)
    loglog()
    xlabel('Frequency\quad(Hz)')
    ylabel('Noise\quad(V/$\sqrt{\mathrm{Hz}}$)')
    savefig('%s-noise.pdf' % session)
    
    # Generate template
    t, sn = Filter.generate_template(p, n, cutoff=cutoff, max_shift=max_shift)
    
    # Plot template
    figure()
    plot(tp, t)
    xlabel('Time\quad(s)')
    ylabel('Template\quad(A.U.)')
    savefig('%s-template.pdf' % session)
    
    # Plot S/N ratio
    figure()
    plot(arange(len(sn))*(dtp*p.shape[-1])**-1, sn*sqrt(dtp*p.shape[-1]))
    loglog()
    xlabel('Frequency\quad(Hz)')
    ylabel('S/N\quad(/$\sqrt{\mathrm{Hz}}$)')
    savefig('%s-sn.pdf' % session)
    
    # Calculate baseline resolution
    print "Baseline resolution for 5.9 keV: %.2f eV" % Analysis.baseline(sn)
    
    # Perform optimal filtering
    pha = Filter.optimal_filter(p, t, max_shift=max_shift)
    
    # Offset correction
    offset = Filter.offset(p)
    oc_pha = Analysis.offset_correction(pha, offset, sigma=2)
    
    # Linearity correction
    lc_pha = Analysis.linearity_correction(oc_pha, sigma=2)
    
    # Spectrum
    figure()
    hist(lc_pha/1e3, bins=4096, histtype='stepfilled', color='y')
    xlim(0, 7)
    xlabel('Energy\quad(keV)')
    ylabel('Count')
    savefig('%s-spec.pdf' % session)
    
    # Fitting
    
    ## MnKa
    mnka = Analysis.ka(lc_pha, sigma=sigma)
    fit(mnka, ka_bins, "MnKa", session)

    ## MnKb
    mnkb = Analysis.kb(lc_pha, sigma=sigma)
    fit(mnkb, kb_bins, "MnKb", session)
    
    return 0

def fit(data, nbin, line, session):
    # Fit
    dE, dE_error, A, A_error, width, width_error = Analysis.fit(data, bins=nbin, line=line)
    
    # Draw fitting result
    figure()
    bins = histogram(data, bins=nbin)
    E = linspace(bins.min(), bins.max(), 1000)
    plot_model(E, dE, A, width, line)
    savefig("%s-%s.pdf" % (session, line))

    print "%s: %.2f +/- %.2f eV" % (line, width, width_error)

def plot_model(E, dE, A, width, line):
    
    # Plot sum
    plot(E, A*Analysis.line_model(E-dE, width, line=line), 'r-')
    
    # Plot individuals
    for p in Constants.FS[line]:
        plot(E, A*p[2]*Analysis.voigt(E-dE, p[0], p[1], width), 'b--')

    xlabel('Energy\quad(eV)')
    ylabel('Normalized Count')

def histogram(data, bins):
    
    # Draw histogram
    n, bins, patches = hist(data, bins=bins, normed=True, histtype='step', color='k')

    return (bins[1:]+bins[:-1])/2

def usage(prog, ka_bins, kb_bins, sigma, session):
    print """Usage: %s [options] pulse.fits noise.fits

Options:
    -c cutoff
        Cut-off bin for template generation (Default: no cut-off)
    -a bins
        Desired number of bins for MnKa spectrum (Default: %d)
    -b bins
        Desired number of bins for MnKb spectrum (Default: %d)
    -s sigmas
        Sigmas for median filter (Default: %d)
    --session name
        Session name used for output files (Default: %s)
    -h
        Show this usage.""" % (prog, ka_bins, kb_bins, sigma, session)


if __name__ == '__main__':
    
    import sys, getopt
    
    opts, params = getopt.getopt(sys.argv[1:], 'h?a:b:c:s:', ['session=', 'help'])
    
    # Initialize
    cutoff = None
    ka_bins = 40
    kb_bins = 20
    sigma = 2
    session = "Unnamed"
    
    for o, a in opts:
        if o == "-c":
            cutoff = int(a)
        if o == "-a":
            ka_bins = int(a)
        if o == "-b":
            kb_bins = int(a)
        if o == "-s":
            sigma = float(a)
        if o == "--session":
            session = a
        if o in ("-h", "-?", "--help"):
            usage(sys.argv[0], ka_bins, kb_bins, sigma, session)
            exit()

    try:
        pulse, noise = params
    except:
        usage(sys.argv[0], ka_bins, kb_bins, sigma, session)
        exit()
    
    
    main(pulse, noise, cutoff=cutoff, ka_bins=ka_bins, kb_bins=kb_bins, sigma=sigma, session=session)