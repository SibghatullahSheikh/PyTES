#!/usr/bin/env python

from multiprocessing import Lock, Pool, cpu_count
from functools import partial
from numpy import *
from pytes import *

def main(N, fwhm, noise, bits, sps, t, prefix, batch=1000):
    
    print "Simulating %d pulses/noises. This takes bit long time..." % N
    
    # Prepare empty pulse and noise arrays
    p = zeros((N, int(sps*t)))
    n = zeros((N, int(sps*t)))
    
    # Define callback function
    def cb(p, n, lock, result):
        lock.acquire()
        _p, _n = result
        p[cb.wm:cb.wm+len(_p)] = _p
        n[cb.wm:cb.wm+len(_n)] = _n
        cb.wm += len(_p)
        print "Generated %d/%d..." % (cb.wm, N)
        lock.release()
    cb.wm = 0
    
    # Start sub-processes
    _N = N
    pool = Pool(cpu_count())
    lock = Lock()
    while _N > batch:
        pool.apply_async(Simulation.simulate, args=(batch, fwhm), kwds={'noise':noise, 'sps':sps, 't':t}, callback=partial(cb, p, n, lock))
        _N -= batch
    
    if _N > 0:
        pool.apply_async(Simulation.simulate, args=(_N, fwhm), kwds={'noise':noise, 'sps':sps, 't':t}, callback=partial(cb, p, n, lock))
    
    pool.close()
    pool.join()
    
    print "Saving FITS files."
    Util.savefits(p, prefix+"p.fits", sps=sps, bits=bits)
    Util.savefits(n, prefix+"n.fits", sps=sps, bits=bits, noise=True)
    
    return 0

def usage(prog, N, prefix, noise, fwhm, bits, sps, t):
    print """Usage: %s [options]

Options:
    -c counts
        Desired number of pulses and noises. (Default: %d)
    -p prefix
        Filename prefix for pulse and noise FITS file. (Default: %s)
    -n noise
        White noise level in V/srHz. (Default: %.2e V/srHz)
    -e fwhm
        Energy resolution of line model in eV. (Default: %.2f eV)
    -b bits
        Desired number of bits for virtual ADC. (Default: %d bits)
    -s sps
        Sampling per second for dummy pulse/noise. (Default: %.2e sps)
    -t time
        Sampling time for dummy pulse/noise. (Default: %.2e s)
    -h
        Show this usage.""" % (prog, N, prefix, noise, fwhm, bits, sps, t)

if __name__ == '__main__':
    
    import sys, getopt
    
    opts, params = getopt.getopt(sys.argv[1:], 'h?c:p:n:e:b:s:t:', ['help'])
    
    # Initialize
    N = 1000
    prefix = "dummy"
    noise = 3e-6
    fwhm = 0
    bits = 16
    sps = 1e6
    t = 2e-3
    
    for o, a in opts:
        if o == "-c":
            N = int(a)
        if o == "-p":
            prefix = a
        if o == "-n":
            noise = float(a)
        if o == "-e":
            fwhm = float(a)
        if o == "-b":
            bits = int(a)
        if o == "-s":
            sps = float(a)
        if o == "-t":
            t = float(a)
        if o in ("-h", "-?", "--help"):
            usage(sys.argv[0], N, prefix, noise, fwhm, bits, sps, t)
            exit()
 
    main(N, fwhm, noise, bits, sps, t, prefix)